// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
  events        Event[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authenticator Authenticator[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Event {
  id            Int            @id @default(autoincrement())
  name          String
  startDate     DateTime
  endDate       DateTime
  price         Decimal
  createdBy     User           @relation(fields: [userId], references: [id])
  userId        String
  registrations Registration[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Contato {
  id       Int     @id @default(autoincrement())
  telefone String
  email    String?
  pessoa   Pessoa  @relation(fields: [pessoaId], references: [id])
  pessoaId Int
}

model Endereco {
  id       Int    @id @default(autoincrement())
  rua      String
  bairro   String
  cidade   String
  pessoa   Pessoa @relation(fields: [pessoaId], references: [id])
  pessoaId Int    @unique
}

model Pessoa {
  id            Int            @id @default(autoincrement())
  sexo          Sexo
  contato       Contato[]
  endereco      Endereco?
  registrations Registration[] @relation("registrationGroups")
  responsavel   Pessoa?        @relation("Responsavel", fields: [responsavelId], references: [id])
  responsavelId Int?
  pessoas       Pessoa[]       @relation("Responsavel")
}

enum Sexo {
  MASCULINO
  FEMININO
}

model Registration {
  id        Int       @id @default(autoincrement())
  event     Event     @relation(fields: [eventId], references: [id])
  eventId   Int
  payment   Payment?
  pessoas   Pessoa[]  @relation("registrationGroups")
  status    RegStatus
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum RegStatus {
  PENDENTE
  CONFIRMADO
  CANCELADO
}

model Payment {
  id             Int          @id @default(autoincrement())
  registration   Registration @relation(fields: [registrationId], references: [id])
  registrationId Int          @unique
  dataPayment    DateTime     @default(now())
  amount         Decimal
  status         PayStatus
}

enum PayStatus {
  PENDENTE
  COMPLETE
  FALHOU
}
